<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.project.mapper.NoticeMapper">

	<!-- 01_01. 게시글 전체목록 조회 및 검색 조회까지 -->
	<select id="selectSearchNoticePage"
		resultType="NoticeDto" parameterType="PageDTO">
		SELECT post_Id, title, content, good, view_cnt, member_id, category_id
		FROM (
		SELECT rownum rm, post_Id, title, content, good, view_cnt, member_id, category_id
		FROM post
		<!-- WHERE절을 include 태그로 삽입 -->
		<include refid="search"></include>
         )WHERE rm between #{start} AND #{end}
         ORDER BY post_Id DESC
	</select>

	<!-- 01_02. 게시글 레코드 갯수 -->
	<select id="noticeTotalCnt" parameterType="map" resultType="int">
		SELECT COUNT(*) FROM post
		<!-- WHERE절을 include 태그로 삽입 -->
		<include refid="search"></include>
	</select>
	<!-- sql code 조각 -->
	<!-- 반복되는 sql의 일부를 sql태그를 이용하여 따로 빼둘수 있다. -->
	<sql id="search">
		<choose>
			<!-- 검색옵션이 전체 검색일 경우 -->
			<when test="searchType == 'all'">
				WHERE (member_id like '%'||#{keyword}||'%'
				OR content like '%'||#{keyword}||'%'
				OR title like '%'||#{keyword}||'%')
				AND category_id = TO_NUMBER(${categoryId})
			</when>
			<!-- 전체 검색이 아닐 경우 -->
			<otherwise>
			  WHERE category_id = TO_NUMBER(${categoryId}) AND ${searchType} like '%'||#{keyword}||'%'
			</otherwise>
		</choose>
	</sql>
    
   
    
    <update id="updateViewCnt" parameterType="long">
        update post
        set view_cnt = view_cnt + 1
        where post_id = #{postId}
</update>
    
    
    <select id="noticeSearchTotalCnt" resultType="int" parameterType="string">
        SELECT count(*) FROM post
        WHERE title LIKE '%'||#{keyword}||'%'
    </select>
    
	<insert id="insertNotice" parameterType="NoticeDto">
		INSERT INTO post (post_id, title, write_time, category_id,content, member_id) 
		VALUES(seq_post.nextval, #{title}, sysdate, #{categoryId}, #{content}, #{memberId})
	</insert>
	
	<update id="updateNotice" parameterType="NoticeDto">
		UPDATE post
			SET title = #{title},
    			content = #{content}
		WHERE post_id = #{postId}
	</update>
	
	<delete id="deleteNotice" parameterType="long">
		delete  from post
		where post_id = #{postId}
	</delete>
	
	<select id="selectByPostId" resultType="NoticeDto" parameterType="long">
        SELECT post_Id, title, content , good, view_cnt, member_id , category_id
        FROM post
        WHERE post_Id = #{postId}
    </select>
    
    <select id="selectNoticeCategoryList" resultType="NoticeCategoryDto">
    	SELECT category_id, category_name 
    	FROM category
    </select>
  
	<insert id="addComment" parameterType="CommentDto">
    	<choose>
			<!-- 검색옵션이 전체 검색일 경우 -->
			<when test="parentCommentId == null">
				INSERT INTO comments 
    			VALUES(seq_comments.nextval, null, #{postId}, #{commentContents}, #{memberId})
    
			</when>
			<!-- 전체 검색이 아닐 경우 -->
			<otherwise>
				INSERT INTO comments 
    			VALUES(seq_comments.nextval, #{parentCommentId}, #{postId}, #{commentContents}, #{memberId})
  			</otherwise>
		</choose>
    	 </insert>
    
    <delete id="deleteComment" parameterType="long">
    	DELETE FROM comments
		WHERE comment_id = #{commentId}
    </delete>
    
    <update id="editComment" parameterType="CommentDto">
    	UPDATE comments
		SET comment_contents = #{commentContents}
		WHERE comment_id = #{commentId}
    </update>
    
    <select id="selectCommentList" parameterType="long" resultType="CommentDto">
    	SELECT member_id, comment_contents, post_id , parent_comment_id, comment_id
    	FROM comments
    	WHERE post_id = #{postId}
    	START WITH parent_comment_id IS NULL
		CONNECT BY PRIOR comment_id = parent_comment_id
    </select>
	
</mapper>