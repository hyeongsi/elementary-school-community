<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.project.mapper.NoticeMapper">

    <!-- 01_01. 게시글 전체목록 조회 및 검색 조회까지 -->
    <select id="selectSearchNoticePage"
            resultType="NoticeDto" parameterType="PageDTO">
        SELECT p.post_Id, p.title, p.content, (SELECT COUNT(*) FROM liketable WHERE post_id = p.post_Id AND good = 1) AS
        good, p.view_cnt, p.member_id, p.category_id, (select name from member_data where id = p.member_id) name,
        NVL(comment_count, 0) AS comment_count, TO_CHAR(p.write_time, 'YYYY-MM-DD HH24:MI:SS') AS write_time
        FROM (
        SELECT rownum rm, post_Id, title, content, good, view_cnt, member_id, category_id, write_time
        FROM post p

        <!-- WHERE절을 include 태그로 삽입 -->
        <include refid="search"></include>
        ORDER BY post_Id DESC
        ) p
        LEFT JOIN (
        SELECT post_id, COUNT(comment_id) AS comment_count
        FROM comments
        GROUP BY post_id
        ) c ON p.post_id = c.post_id
        WHERE rm BETWEEN #{start} AND #{end}
        ORDER BY post_Id DESC
    </select>
    
    <select id="selectSearchNoticePageById"
	resultType="NoticeDto" parameterType="MemberPageDto">
	 SELECT p.post_Id, p.title, p.content, (SELECT COUNT(*) FROM liketable
	WHERE post_id = p.post_Id AND good = 1) AS good,
	p.view_cnt, p.member_id, p.category_id, NVL(comment_count, 0) AS comment_count,
	TO_CHAR(p.write_time, 'YYYY-MM-DD HH24:MI:SS') AS write_time
	FROM (
	SELECT rownum rm, post_Id, title, content, good, view_cnt, member_id,
	category_id, write_time
	FROM post
	WHERE member_id = #{memberId}
  	ORDER BY post_Id DESC
	) p
  	LEFT JOIN (
	SELECT post_id, COUNT(comment_id) AS comment_count
	FROM comments
	GROUP BY post_id
	) c ON p.post_id = c.post_id
	WHERE 
	<include refid="mypageSearch"></include>
	AND rm BETWEEN #{start} AND #{end}
	ORDER BY post_Id DESC
</select>

<!-- sql code 조각 -->
    <sql id="mypageSearch">
        <choose>
            <!-- 검색옵션이 전체 검색일 경우 -->
            <when test="searchType == 'all'">
                (member_id like '%'||#{keyword}||'%'
                OR content like '%'||#{keyword}||'%'
                OR title like '%'||#{keyword}||'%')
            </when>
            <!-- 전체 검색이 아닐 경우 -->
            <otherwise>
                ${searchType} like '%'||#{keyword}||'%'
            </otherwise>
        </choose>
    </sql>
    
    <!-- sql code 조각 -->
    <sql id="search">
        <choose>
            <!-- 검색옵션이 전체 검색일 경우 -->
            <when test="searchType == 'all'">
                WHERE (member_id like '%'||#{keyword}||'%'
                OR content like '%'||#{keyword}||'%'
                OR title like '%'||#{keyword}||'%')
                AND category_id = TO_NUMBER(${categoryId})
            </when>
            <!-- 전체 검색이 아닐 경우 -->
            <otherwise>
                WHERE category_id = TO_NUMBER(${categoryId}) AND ${searchType} like '%'||#{keyword}||'%'
            </otherwise>
        </choose>
    </sql>
    
    <select id="selectSearchLikePostById" resultType="NoticeDto"
            parameterType="MemberPageDto">
        SELECT post.post_Id, post.title, post.content, post.good, post.view_cnt, post.member_id, post.category_id, TO_CHAR(write_time, 'YYYY-MM-DD HH24:MI:SS') AS write_time
		FROM POST
		INNER JOIN liketable l ON post.post_Id = l.post_Id
		WHERE l.member_id = #{memberId}
		ORDER BY post.post_Id DESC
    </select>
    
    

    <!-- 01_02. 게시글 레코드 갯수 -->
    <select id="noticeTotalCnt" parameterType="map" resultType="int">
        SELECT COUNT(*) FROM post
        <!-- WHERE절을 include 태그로 삽입 -->
        <include refid="search"></include>
    </select>
    
    <select id="mypageCnt" parameterType="map" resultType="int">
    SELECT COUNT(*) FROM post
    WHERE member_id = #{memberId}
    AND
    <include refid="mypageSearch"></include>
    </select>
    <select id="mypageLikeCnt" parameterType="map" resultType="int">
    SELECT COUNT(*) FROM post
    INNER JOIN liketable l ON post.post_Id = l.post_Id
	WHERE l.member_id = #{memberId}
	AND
	<include refid="mypageSearch"></include>
    </select>


    <update id="updateViewCnt" parameterType="long">
        update post
        set view_cnt = view_cnt + 1
        where post_id = #{postId}
    </update>


    <select id="noticeSearchTotalCnt" resultType="int" parameterType="string">
        SELECT count(*) FROM post
        WHERE title LIKE '%'||#{keyword}||'%'
    </select>

    <insert id="insertNotice" parameterType="NoticeDto">
        INSERT INTO post (post_id, title, write_time, category_id,content, member_id)
        VALUES(seq_post.nextval, #{title}, sysdate, #{categoryId}, #{content}, #{memberId})
    </insert>

    <update id="updateNotice" parameterType="NoticeDto">
        UPDATE post
        SET title = #{title},
        content = #{content}
        WHERE post_id = #{postId}
    </update>

    <delete id="deleteNotice" parameterType="long">
        delete from post
        where post_id = #{postId}
    </delete>

	<!-- id값으로 게시글 목록 반환 로직 -->
    <select id="selectByPostId" resultType="NoticeDto" parameterType="long">
	SELECT post_Id, title, content , good, view_cnt, p.member_id ,
	category_id, TO_CHAR(write_time, 'YYYY-MM-DD HH24:MI:SS') write_time,
	(select name from member_data where id = p.member_id) name, 
	(select category_name from category where category_id = p.category_id) category_name
	FROM post p
	WHERE post_Id = #{postId}
    </select>
    

    <select id="selectNoticeCategoryList" resultType="NoticeCategoryDto">
        SELECT category_id, category_name , board_id
        FROM category
        WHERE board_id > 37
    </select>

    <select id="selectUserNoticeCategoryList" resultType="NoticeCategoryDto">
        SELECT category_id, category_name
        FROM category
        WHERE board_id = #{boardId}
    </select>

    <select id="selectBoardList" resultType="BoardDto">
        SELECT * FROM board
        WHERE board_id >=60
    </select>

    <insert id="addComment" parameterType="CommentDto">
        <choose>
            <when test="parentCommentId == null">
                INSERT INTO comments (comment_id, parent_comment_id, post_id, comment_contents, member_id)
                VALUES(seq_comments.nextval, null, #{postId}, #{commentContents}, #{memberId})

            </when>
            <otherwise>
                INSERT INTO comments (comment_id, parent_comment_id, post_id, comment_contents, member_id)
                VALUES(seq_comments.nextval, #{parentCommentId}, #{postId}, #{commentContents}, #{memberId})
            </otherwise>
        </choose>
    </insert>

<!-- 
    <delete id="deleteComment" parameterType="long">
        DELETE FROM comments
        WHERE comment_id = #{commentId}
    </delete>
 -->
 	<update id="deleteComment" parameterType="long">
      	UPDATE comments SET del_check = 1, comment_contents = '삭제된 댓글입니다'
	   	WHERE comment_id = #{commentId}
    </update>
    
    <delete id="completeDelComment" parameterType="long">
      	DELETE comments
	   	WHERE comment_id = #{commentId}
    </delete>
    
    <select id="deleteCheck" parameterType="long" resultType="int">
      	SELECT COUNT(p.parent_comment_id) AS referenced_count
		FROM comments c
		LEFT JOIN comments p ON c.comment_id = p.parent_comment_id
		WHERE c.comment_id = #{comment_id}
		GROUP BY c.comment_id
    </select>

    <update id="editComment" parameterType="CommentDto">
        UPDATE comments
        SET comment_contents = #{commentContents}
        WHERE comment_id = #{commentId}
    </update>

	<!-- 댓글 정보 가져옴 -->
    <select id="selectCommentList" parameterType="long" resultType="CommentDto">
        SELECT member_id, comment_contents, post_id , parent_comment_id, comment_id, del_check,
        (SELECT name FROM member_data WHERE id = c.member_id) name,
        TO_CHAR(reply_time, 'YYYY-MM-DD HH24:MI:SS') reply_time
        FROM comments c
        WHERE post_id = #{postId}
        START WITH parent_comment_id IS NULL
        CONNECT BY PRIOR comment_id = parent_comment_id
    </select>

    <select id="commnetCntList" parameterType="long" resultType="list">
        SELECT p.post_id, NVL(COUNT(c.comment_id), 0) AS comment_count
        FROM post p
        LEFT JOIN comments c ON p.post_id = c.post_id
        WHERE p.category_id = 1
        GROUP BY p.post_id
    </select>

    <select id="likeCheck" parameterType="LikeDto" resultType="LikeDto">
        SELECT * FROM liketable
        WHERE member_id = #{memberId} AND post_id = #{postId}
    </select>

    <insert id="addLike" parameterType="LikeDto">
        INSERT INTO liketable
        VALUES (#{memberId}, #{postId}, 1)
    </insert>

    <update id="cancelLike" parameterType="LikeDto">
        UPDATE liketable
        SET good = 0
        WHERE member_id = #{memberId} AND post_id = #{postId}
    </update>
    
    <delete id="deleteLike" parameterType="LikeDto">
    	DELETE liketable
    	WHERE member_id = #{memberId} AND post_id = #{postId}
    </delete>

    <update id="reLike" parameterType="LikeDto">
        UPDATE liketable
        SET good = 1
        WHERE member_id = #{memberId} AND post_id = #{postId}
    </update>

    <select id="likeCnt" parameterType="long" resultType="long">
        SELECT COUNT(*) FROM liketable
        WHERE post_id = #{postId} AND good=1
    </select>

    <select id="noticeNoSearchTotalCnt" resultType="int">
        SELECT COUNT(*) FROM post
    </select>

    <select id="commentTotalCnt" resultType="int">
        SELECT COUNT(*) FROM comments
    </select>

    <select id="selectNoticePageWithName" resultType="NoticeBoardCategoryMemberNameDto" parameterType="PageDto">
        SELECT post_id, board_id, title, content, view_cnt, board_name, category_name, name
        FROM (SELECT rownum rm, post_id, b.board_id, title, content, view_cnt, b.board_name, c.category_name, m.name
        FROM post p
        JOIN category c on p.category_id = c.category_id
        JOIN member_data m on p.member_id = m.id
        JOIN board b on b.board_id = c.board_id
        ORDER BY post_id DESC)
        WHERE rm between #{start} AND #{end}
    </select>

    <select id="selectCommentListAll" resultType="CommentAllJoinDto" parameterType="PageDto">
        SELECT comment_id, member_id, board_id, category_id, post_id, COMMENT_CONTENTS, board_name, category_name, name
        FROM (SELECT rownum rm, comment_id, board_id, category_id, member_id, post_id, COMMENT_CONTENTS, board_name,
        category_name, name
        FROM (SELECT cmt.comment_id, cmt.member_id, b.board_id, c.category_id, cmt.post_id, cmt.COMMENT_CONTENTS,
        b.board_name, c.category_name, m.name
        FROM comments cmt
        JOIN member_data m on cmt.member_id = m.id
        JOIN post p on cmt.post_id = p.post_id
        JOIN category c on p.category_id = c.category_id
        JOIN board b on c.board_id = b.board_id
        ORDER BY comment_id DESC))
        WHERE rm between #{start} AND #{end}
    </select>

    <delete id="deleteNoticeList" parameterType="List">
        DELETE FROM post
        WHERE post_id IN (
        <foreach collection="noticeDtoList" item="item" separator=",">
            #{item.postId}
        </foreach>
        )
    </delete>

    <select id="noticeTotalCtnById" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM (SELECT rownum rm, post_id, title, content, view_cnt, b.board_name, c.category_name, m.name, c.category_id
        FROM post p
        JOIN category c on p.category_id = c.category_id
        JOIN member_data m on p.member_id = m.id
        JOIN board b on b.board_id = c.board_id)
        WHERE category_id = #{categoryId}
    </select>

    <select id="selectNoticeListById" resultType="NoticeBoardCategoryMemberNameDto"
            parameterType="FindNoticeByCategoryIdPageDto">
        SELECT post_id, board_id, title, content, view_cnt, board_name, category_name, name
        FROM (SELECT rownum rm, post_id, b.board_id, title, content, view_cnt, b.board_name, c.category_name, m.name
        FROM post p
        JOIN category c on p.category_id = c.category_id
        JOIN member_data m on p.member_id = m.id
        JOIN board b on b.board_id = c.board_id
        WHERE p.category_id = #{categoryId}
        ORDER BY post_id DESC)
        WHERE rm between #{pageDto.start} AND #{pageDto.end}
    </select>

    <delete id="deleteCommentList" parameterType="List">
        DELETE FROM comments
        WHERE comment_id IN (
        <foreach collection="commentDtoList" item="item" separator=",">
            #{item.commentId}
        </foreach>
        )
    </delete>

</mapper>